-- Ensure this is run on the client (LocalPlayer)
local player = game.Players.LocalPlayer
local IYMouse = player:GetMouse()

-- Flying variables
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1

-- Noclip variables
local Noclip = nil
local Clip = true -- Initially set to true so noclip is not active

-- Function to get the character's HumanoidRootPart
local function getRoot(character)
    return character:WaitForChild("HumanoidRootPart")
end

-- Notification function
local function notify(title, text)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5
    })
end

-- Helper functions to check states
local function isFlying()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- Check if the flying BodyGyro and BodyVelocity objects exist
        return character.HumanoidRootPart:FindFirstChildOfClass("BodyGyro") ~= nil and
               character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") ~= nil
    end
    return false
end


local function isClipped()
    if player.Character then
        for _, v in pairs(player.Character:GetDescendants()) do
            if v:IsA("BasePart") and not v.CanCollide then
                return false
            end
        end
    end
    return true
end

-- Function to start flying
function sFLY(vfly)
    repeat wait() until player.Character and getRoot(player.Character) and player.Character:FindFirstChildOfClass("Humanoid")
    repeat wait() until IYMouse

    if flyKeyDown or flyKeyUp then 
        flyKeyDown:Disconnect() 
        flyKeyUp:Disconnect() 
    end

    local T = getRoot(player.Character)
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0

    local function FLY()
        FLYING = true
        local BG = Instance.new('BodyGyro')
        local BV = Instance.new('BodyVelocity')
        BG.P = 9e4
        BG.Parent = T
        BV.Parent = T
        BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        BG.cframe = T.CFrame
        BV.velocity = Vector3.new(0, 0, 0)
        BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

        task.spawn(function()
            repeat wait()
                if CONTROL.F + CONTROL.B ~= 0 or CONTROL.L + CONTROL.R ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                    BV.velocity = ((workspace.CurrentCamera.CFrame.lookVector * (CONTROL.F + CONTROL.B)) + 
                                   ((workspace.CurrentCamera.CFrame * CFrame.new(CONTROL.L + CONTROL.R, 
                                   (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CFrame.p)) * SPEED
                else
                    BV.velocity = Vector3.new(0, 0, 0)
                end
                BG.cframe = workspace.CurrentCamera.CFrame
            until not FLYING
            BG:Destroy()
            BV:Destroy()
            if player.Character:FindFirstChildOfClass('Humanoid') then
                player.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
            end
        end)
    end

    flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = vfly and vehicleflyspeed or iyflyspeed
        elseif KEY:lower() == 's' then
            CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'a' then
            CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'd' then 
            CONTROL.R = vfly and vehicleflyspeed or iyflyspeed
        elseif QEfly and KEY:lower() == 'e' then
            CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed) * 2
        elseif QEfly and KEY:lower() == 'q' then
            CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed) * 2
        end
    end)

    flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
        if KEY:lower() == 'w' then CONTROL.F = 0
        elseif KEY:lower() == 's' then CONTROL.B = 0
        elseif KEY:lower() == 'a' then CONTROL.L = 0
        elseif KEY:lower() == 'd' then CONTROL.R = 0
        elseif KEY:lower() == 'e' then CONTROL.Q = 0
        elseif KEY:lower() == 'q' then CONTROL.E = 0
        end
    end)

    FLY()
end

-- Function to stop flying
function NOFLY()
    FLYING = false
    if flyKeyDown or flyKeyUp then 
        flyKeyDown:Disconnect() 
        flyKeyUp:Disconnect() 
    end
    -- Do not reset collisions here to avoid interference with noclip
    pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

-- Noclip function
function noclip()
    Clip = false
    local function Nocl()
        if Clip == false and game.Players.LocalPlayer.Character ~= nil then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
                    v.CanCollide = false
                end
            end
        end
        wait(0.21) -- basic optimization
    end
    if Noclip then Noclip:Disconnect() end -- Prevent duplicate connections
    Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end


-- Clip function
function clip()
    if Noclip then 
        Noclip:Disconnect()  -- Disconnect the current noclip loop
    end
    Clip = true

    -- Re-enable collisions for the player
    if game.Players.LocalPlayer.Character ~= nil then
        for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v:IsA('BasePart') then
                v.CanCollide = true
            end
        end
    end
end

-- Chat commands with notifications
player.Chatted:Connect(function(msg)
    if msg:lower() == ".fly" then
        sFLY(false) -- Activate flying mode
        notify("HD Admin", "Command Used: .fly")
    elseif msg:lower() == ".unfly" then
        NOFLY() -- Deactivate flying mode
        notify("HD Admin", "Command Used: .unfly")
    elseif msg:lower() == ".noclip" then
        noclip() -- Activate noclip mode
        notify("HD Admin", "Command Used: .noclip")
    elseif msg:lower() == ".clip" then
        clip() -- Deactivate noclip mode
        notify("HD Admin", "Command Used: .clip")
    elseif msg:lower() == ".reset" then
        -- Reset the game by teleporting the player
        local Players = game:GetService("Players")
        local TeleportService = game:GetService("TeleportService")
        local PlaceId = game.PlaceId
        local JobId = game.JobId
        
        if #Players:GetPlayers() <= 1 then
            -- If the player is alone, just kick them and rejoin
            Players.LocalPlayer:Kick("\nRejoining...")
            wait(1)
            TeleportService:Teleport(PlaceId, Players.LocalPlayer) -- Teleport back to the same place
        else
            -- Otherwise, teleport to the exact same instance
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
        end

        -- Notify that the reset is happening
        notify("HD Admin", "Resetting the game...")
    elseif msg:sub(1, 1) == "." then
        -- Unrecognized command
        notify("HD Admin", "Command not recognised or something went wrong :(")
    end
end)
